# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#-- global variables, can be accessed by sub-charts.
global:
  #-- the registry where the images are stored. override during runtime for other registry at global level or individual level.
  repository: ~ # provide the repo name from where images will be sourced for example bcgo
  #-- the registry where the images are stored. override during runtime for other registry at global level or individual level. default is ghcr.io
  registry: ghcr.io # ghcr.io for directly streaming from github container registry or "artifacts.developer.gov.bc.ca/github-docker-remote" for artifactory, or any other registry.
  #-- the tag of the image, it can be latest, 1.0.0 etc..., or the sha256 hash
  tag: ~
  #-- turn off autoscaling for the entire suite by setting this to false. default is true.
  autoscaling: false
  #-- global secrets, can be accessed by sub-charts.
  secrets:
    enabled: true
    databasePassword: ~
    databaseName: ~
    persist: true
  config:
    databaseUser: ~
  #-- domain of the application, it is required, apps.silver.devops.gov.bc.ca for silver cluster and apps.devops.gov.bc.ca for gold cluster
  domain: "apps.silver.devops.gov.bc.ca" # it is apps.gold.devops.gov.bc.ca for gold cluster
  databaseAlias: ~ # set using github action workflow during helm deploy.

#-- the components of the application, backend.
backend:
  #-- enable or disable backend
  enabled: true
  #-- the deployment strategy, can be "Recreate" or "RollingUpdate"
  deploymentStrategy: Recreate
  #-- autoscaling for the component. it is optional and is an object.
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 3
    #-- the maximum number of replicas.
    maxReplicas: 7
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
  #-- vault, for injecting secrets from vault. it is optional and is an object. it creates an initContainer which reads from vault and app container can source those secrets. for referring to a working example with vault follow this link: https://github.com/bcgov/onroutebc/blob/main/charts/onroutebc/values.yaml#L171-L186
  vault:
    #-- enable or disable vault.
    enabled: false
    #-- the role of the vault. it is required, #licenseplate-prod or licenseplate-nonprod, license plate is the namespace without env
    role: ~
    #-- the vault path where the secrets live. it is required, dev/api-1, dev/api-2, test/api-1 etc...
    secretPaths:
      - dev/api-1
      - dev/api-2
      - test/api-1
      - test/api-2
      - prod/api-1
      - prod/api-2
    #-- resources specific to vault initContainer. it is optional and is an object.
    resources:
      requests:
        cpu: 50m
        memory: 25Mi
  #-- the service for the component. for inter namespace communication, use the service name as the hostname.
  service:
    #-- the type of the service. it can be ClusterIP, NodePort, LoadBalancer, ExternalName. ClusterIP is the default and is recommended.
    type: ClusterIP
    port: 80 # this is the service port, where it will be exposed internal to the namespace.
    targetPort: 3000 # this is container port where app listens on
  pdb:
    enabled: false # enable it in PRODUCTION for having pod disruption budget.
    minAvailable: 1 # the minimum number of pods that must be available during the disruption budget.

frontend:
  # -- enable or disable a component deployment.
  enabled: true
  # -- the deployment strategy, can be "Recreate" or "RollingUpdate"
  deploymentStrategy: Recreate

  #-- autoscaling for the component. it is optional and is an object.
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 3
    #-- the maximum number of replicas.
    maxReplicas: 7
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
  #-- the service for the component. for inter namespace communication, use the service name as the hostname.
  service:
    #-- enable or disable the service.
    enabled: true
    #-- the type of the service. it can be ClusterIP, NodePort, LoadBalancer, ExternalName. ClusterIP is the default and is recommended.
    type: ClusterIP
    #-- the ports for the service.
    ports:
      - name: http
        #-- the port for the service. the service will be accessible on this port within the namespace.
        port: 80
        #-- the container port where the application is listening on
        targetPort: 3000
        #-- the protocol for the port. it can be TCP or UDP. TCP is the default and is recommended.
        protocol: TCP
      - port: 3003
        targetPort: 3003
        protocol: TCP
        name: metrics
  ingress:
    annotations:
      haproxy.router.openshift.io/balance: "roundrobin"
      route.openshift.io/termination: "edge"
      haproxy.router.openshift.io/rate-limit-connections: "true"
      haproxy.router.openshift.io/rate-limit-connections.concurrent-tcp: "10"
      haproxy.router.openshift.io/rate-limit-connections.rate-http: "20"
      haproxy.router.openshift.io/rate-limit-connections.rate-tcp: "50"
      haproxy.router.openshift.io/disable_cookies: "true"
  pdb:
    enabled: false # enable it in PRODUCTION for having pod disruption budget.
    minAvailable: 1 # the minimum number of pods that must be available during the disruption budget.
