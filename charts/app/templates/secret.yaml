{{include "validation" .}}
{{- if and .Values.global.secrets .Values.global.secrets.enabled}}
{{- $databaseUser := printf ""}}
{{- $databasePassword := printf ""}}
{{- $host := printf ""}}
{{- $databaseName := printf ""}}
{{- $hostWithoutPort := printf ""}}
{{- if .Values.crunchy.enabled}}
  {{- $secretName := printf "%s-pguser-%s" .Values.global.databaseAlias .Values.global.config.databaseUser }}
  {{- $databaseUser = .Values.global.config.databaseUser}}
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $secretName ) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  {{- $databasePassword = get $secretData "password"  }}
  {{- $databaseName = b64dec (get $secretData "dbname") }}
  {{- $host = printf "%s:%s" (b64dec (get $secretData "host")) (b64dec (get $secretData "port")) }}
  {{- $hostWithoutPort = printf "%s" (b64dec (get $secretData "host"))  }}
{{- else }}
  {{- $databaseUser = "quickstart"  }}
  {{- $databasePassword = .Values.global.secrets.databasePassword | default (randAlphaNum 10) }}
  {{- $secretName := printf "%s-database" .Release.Name }}
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $secretName ) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set below to existing secret data or generate a random one when not exists
  {{- $databasePassword = (get $secretData "postgres-password") | default ($databasePassword | b64enc) }}
  {{- $databaseName = "quickstart" }}
  {{- $host = printf "%s-%s:5432" .Release.Name .Values.global.databaseAlias }}
  {{- $hostWithoutPort = printf "%s-%s" .Release.Name .Values.global.databaseAlias }}

{{- end }}
{{- $databaseURL := printf "postgresql://%s:%s@%s/%s" $databaseUser (b64dec $databasePassword) $host $databaseName }}
{{- $databaseJDBCURL := printf "jdbc:postgresql://%s:%s@%s/%s" $databaseUser (b64dec $databasePassword) $host $databaseName }}
{{- $databaseJDBCURLNoCreds := printf "jdbc:postgresql://%s/%s" $host $databaseName }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-backend
  labels: {{- include "labels" . | nindent 4 }}
  {{- if .Values.global.secrets.persist }}
  annotations:
    helm.sh/resource-policy: keep
  {{- end }}
data:
  POSTGRES_PASSWORD: {{ $databasePassword | quote }}
  POSTGRES_USER: {{ $databaseUser | b64enc | quote }}
  POSTGRES_DATABASE: {{ $databaseName | b64enc | quote }}
  POSTGRES_HOST: {{ $hostWithoutPort | b64enc | quote }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-flyway
  labels: {{- include "labels" . | nindent 4 }}
  {{- if .Values.global.secrets.persist }}
  annotations:
    helm.sh/resource-policy: keep
  {{- end }}
data:
  FLYWAY_URL: {{ $databaseJDBCURLNoCreds | b64enc | quote }}
  FLYWAY_USER: {{ $databaseUser | b64enc | quote }}
  FLYWAY_PASSWORD: {{ $databasePassword | quote }}

---
{{- if not .Values.crunchy.enabled}} # only when it is bitnami-postgres
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-database
  labels: {{- include "labels" . | nindent 4 }}
  {{- if .Values.global.secrets.persist }}
  annotations:
    helm.sh/resource-policy: keep
  {{- end }}
data:
  postgres-password: {{ $databasePassword  | quote }}
  password: {{ $databasePassword | quote }}
{{- end }}
{{- end }}
